/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package qa;

import hris.ConnectionManager;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import qa.*;

/**
 *
 * @author i5
 */
public class ProdRec extends javax.swing.JPanel {

    /**
     * Creates new form ProdRec
         */
    Connection con;
    Statement stmt;
    ResultSet rs;
    DefaultTableModel model;
    public String attendanceScore = "";
    public ProdRec() {
        initComponents();
        loadData();
        qa_date.setDate(new Date());
        kc_date.setDate(new Date());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        roundPanel1 = new jdev.swing.RoundPanel();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        quality_score = new javax.swing.JTextField();
        qa_id = new javax.swing.JTextField();
        qa_name = new javax.swing.JTextField();
        qa_date = new com.toedter.calendar.JDateChooser();
        roundPanel2 = new jdev.swing.RoundPanel();
        jScrollPane13 = new javax.swing.JScrollPane();
        jTable10 = new javax.swing.JTable();
        roundPanel3 = new jdev.swing.RoundPanel();
        jLabel6 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        kc_score = new javax.swing.JTextField();
        kc_id = new javax.swing.JTextField();
        kc_name = new javax.swing.JTextField();
        kc_date = new com.toedter.calendar.JDateChooser();

        jPanel1.setBackground(java.awt.Color.white);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("QUALITY ANALYST SCORE TRACKER");

        jLabel2.setText("ID:");

        jLabel4.setText("Name:");

        jButton1.setText("SUBMIT");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Date:");

        jLabel5.setText("Transaction Quality Score:");

        quality_score.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quality_scoreActionPerformed(evt);
            }
        });

        qa_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                qa_idKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                qa_idKeyTyped(evt);
            }
        });

        qa_date.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout roundPanel1Layout = new javax.swing.GroupLayout(roundPanel1);
        roundPanel1.setLayout(roundPanel1Layout);
        roundPanel1Layout.setHorizontalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roundPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(qa_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(roundPanel1Layout.createSequentialGroup()
                                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(qa_id, javax.swing.GroupLayout.DEFAULT_SIZE, 253, Short.MAX_VALUE)
                                    .addComponent(qa_name))
                                .addGap(4, 4, 4)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(quality_score, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(roundPanel1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(34, 34, 34))
        );
        roundPanel1Layout.setVerticalGroup(
            roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(qa_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(qa_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(roundPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(qa_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(quality_score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(42, Short.MAX_VALUE))
        );

        roundPanel2.setBackground(java.awt.Color.white);

        jTable10.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Date:", "ID", "Name", "QA Score", "Knowledge Check", "Updated by:"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable10.setSelectionBackground(new java.awt.Color(204, 204, 255));
        jTable10.setShowHorizontalLines(true);
        jScrollPane13.setViewportView(jTable10);

        javax.swing.GroupLayout roundPanel2Layout = new javax.swing.GroupLayout(roundPanel2);
        roundPanel2.setLayout(roundPanel2Layout);
        roundPanel2Layout.setHorizontalGroup(
            roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 922, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        roundPanel2Layout.setVerticalGroup(
            roundPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane13, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel6.setText("Knowledge Check Score Tracker");

        jLabel7.setText("ID:");

        jLabel8.setText("Name:");

        jButton2.setText("SUBMIT");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("Date:");

        jLabel10.setText("Knowledge Check Score:");

        kc_id.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                kc_idKeyReleased(evt);
            }
        });

        kc_date.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        javax.swing.GroupLayout roundPanel3Layout = new javax.swing.GroupLayout(roundPanel3);
        roundPanel3.setLayout(roundPanel3Layout);
        roundPanel3Layout.setHorizontalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 311, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel3Layout.createSequentialGroup()
                        .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roundPanel3Layout.createSequentialGroup()
                                .addComponent(kc_date, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(12, 12, 12))
                            .addGroup(roundPanel3Layout.createSequentialGroup()
                                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(kc_name, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(kc_id, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(12, Short.MAX_VALUE))))
                    .addGroup(roundPanel3Layout.createSequentialGroup()
                        .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(roundPanel3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(kc_score, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel10))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(53, 53, 53))
        );
        roundPanel3Layout.setVerticalGroup(
            roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roundPanel3Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(kc_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(kc_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(roundPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(roundPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roundPanel3Layout.createSequentialGroup()
                        .addComponent(kc_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(kc_score, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(49, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(roundPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addComponent(roundPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(14, 14, 14))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(roundPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(roundPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(roundPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 67, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
           try {
        String fname = qa_name.getText();
        String ids = qa_id.getText();
        String qascore = quality_score.getText();

        // Check if the fields are not empty
        if (fname.isEmpty() || ids.isEmpty() || qascore.isEmpty()) {
            // Display an error message if any of the fields is empty
            JOptionPane.showMessageDialog(this, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Determine the productivity score based on the quality score
        double productivityScore;
        switch (qascore) {
            case "5":
                productivityScore = 120;
                break;
            case "4":
                productivityScore = 96;
                break;
            case "3":
                productivityScore = 72;
                break;
            case "2":
                productivityScore = 48;
                break;
            case "1":
                productivityScore = 24;
                break;
            case "1.5":
                productivityScore = 36;
                break;
            case "2.5":
                productivityScore = 60;
                break;
            case "3.5":
                productivityScore = 84;
                break;
            case "4.5":
                productivityScore = 108;
                break;
            default:
                // Handle other cases if needed
                productivityScore = 0;
                break;
        }

        // Prepare the INSERT or UPDATE query
        Connection con = ConnectionManager.getConnection();
        String queryCheck = "SELECT * FROM performance WHERE EmployeeID = ?";
        PreparedStatement pstmtCheck = con.prepareStatement(queryCheck);
        pstmtCheck.setString(1, ids);
        ResultSet rsCheck = pstmtCheck.executeQuery();
 
        if (rsCheck.next()) {
            // If the ID already exists, perform an update operation
            String queryUpdate = "UPDATE performance SET Quality = ?, name = ?, date = ?, Attdnce = ? WHERE EmployeeID = ?";
            PreparedStatement pstmtUpdate = con.prepareStatement(queryUpdate);
            String date = qa_date.getDate().toString();
            pstmtUpdate.setDouble(1, productivityScore);
            pstmtUpdate.setString(2, fname);
            pstmtUpdate.setString(3, date);
            pstmtUpdate.setString(5, ids);
            pstmtUpdate.setDouble(4, Double.parseDouble(attendanceScore));
            int rowsUpdated = pstmtUpdate.executeUpdate();

            if (rowsUpdated > 0) {
                JOptionPane.showMessageDialog(this, "Productivity data updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update productivity data", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // If the ID doesn't exist, perform an insert operation
            String queryInsert = "INSERT INTO performance (EmployeeID, Quality, name, date, knowledge_checker, Perf, Attdnce, Overall) VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            PreparedStatement pstmtInsert = con.prepareStatement(queryInsert);
            String date = qa_date.getDate().toString();
            pstmtInsert.setString(1, ids);
            pstmtInsert.setDouble(2, productivityScore);
            pstmtInsert.setString(3, fname);
            pstmtInsert.setString(4, date);
            pstmtInsert.setString(5, kc_score.getText());
            pstmtInsert.setString(6, null);
            pstmtInsert.setString(7, null);
            pstmtInsert.setDouble(8, Double.parseDouble(attendanceScore));
            int rowsInserted = pstmtInsert.executeUpdate();

            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Productivity data inserted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to insert productivity data", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        loadData();
    } catch (Exception e) {
        // Handle any exceptions that occur during the operation
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadData() {
    try (Connection con = ConnectionManager.getConnection();
         Statement stmt = con.createStatement();
         ResultSet rs = stmt.executeQuery("SELECT * FROM performance");
    ) {
        // Create a DefaultTableModel with column names
        String[] columnNames = {"Date", "ID", "Name", "QA Score", "Knowledge Check", "Updated By"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);

        // Iterate over the ResultSet and add each row to the model
        while (rs.next()) {
            model.addRow(new Object[]{
                rs.getString("date"),
                rs.getInt("EmployeeID"),
                rs.getString("name"),
                rs.getDouble("Quality") + "%",
                rs.getInt("knowledge_checker") + "%",
                "Current User"
            });
        }

        // Set the model to the JTable
        jTable10.setModel(model);
    } catch (SQLException ex) {
        ex.printStackTrace();
    }
}
 private int getEmployeeAbsences(int employeeId) {
            int absences = 0;

            try {
                con = ConnectionManager.getConnection();
                String query = "SELECT DATE(timestamp) as date, COUNT(CASE WHEN status = 'Day In' THEN 1 END) as day_in_count, "
                             + "COUNT(CASE WHEN status = 'Day Out' THEN 1 END) as day_out_count "
                             + "FROM dtr WHERE EmployeeID = ? "
                             + "GROUP BY DATE(timestamp)";

                PreparedStatement pst = con.prepareStatement(query);
                pst.setInt(1, employeeId);

                rs = pst.executeQuery();

                while (rs.next()) {
                    int dayInCount = rs.getInt("day_in_count");
                    int dayOutCount = rs.getInt("day_out_count");

                    // Consider it an absence if any day lacks either a "Day In" or "Day Out" entry
                    if (dayInCount == 0 || dayOutCount == 0) {
                        absences++;
                    }
                }

            } catch (SQLException ex) {
                ex.printStackTrace();
            }  
            return absences;
        }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                 // TODO add your handling code here:
       try {
    String fname = kc_name.getText();
    String ids = kc_id.getText();
    String qascore = kc_score.getText();
    
    // Check if the fields are not empty
    if (fname.isEmpty() || ids.isEmpty() || qascore.isEmpty()) {
        // Display an error message if any of the fields is empty
        JOptionPane.showMessageDialog(this, "Please fill in all fields", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    // Determine the productivity score based on the knowledge checker score
    int productivityScore;
    switch (qascore) {
        case "5":
            productivityScore = 120;
            break;
        case "4":
            productivityScore = 96;
            break;
        case "3":
            productivityScore = 72;
            break;
        case "2":
            productivityScore = 48;
            break;
        case "1":
            productivityScore = 24;
            break;
        default:
            // Handle other cases if needed
            productivityScore = 0;
            break;
    }
    
    // Prepare the UPDATE query
    Connection con = ConnectionManager.getConnection();
    String query = "UPDATE performance SET knowledge_checker = ? WHERE EmployeeID = ?";
    PreparedStatement pstmt = con.prepareStatement(query);
    pstmt.setInt(1, productivityScore);
    pstmt.setInt(2, Integer.parseInt(ids));

    // Execute the UPDATE query
    int rowsUpdated = pstmt.executeUpdate();
    
    if (rowsUpdated > 0) {
        // Display a success message if the update was successful
        JOptionPane.showMessageDialog(this, "Productivity data updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
    } else {
        // Display an error message if the update failed
        JOptionPane.showMessageDialog(this, "Failed to update productivity data", "Error", JOptionPane.ERROR_MESSAGE);
    }
    loadData();
} catch (Exception e) {
    // Handle any exceptions that occur during the update process
    e.printStackTrace();
    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_jButton2ActionPerformed

    private void qa_idKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qa_idKeyTyped
                                                      // TODO add your handling code here:
    }//GEN-LAST:event_qa_idKeyTyped

    private void qa_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qa_idKeyReleased
        // TODO add your handling code here
          String id = qa_id.getText().trim();
            // Call the method to retrieve employee information based on the ID
            if(id.isEmpty()){
                qa_name.setText("");
                quality_score.setText("");
            }

        handleIDKeyReleased(id);
            getEmployeeByID(id);        // TODO add your handling code here:   
    }//GEN-LAST:event_qa_idKeyReleased

    private void kc_idKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_kc_idKeyReleased
                // TODO add your handling code here:
                String id = qa_id.getText().trim();
            // Call the method to retrieve employee information based on the ID
            if(id.isEmpty()){
                kc_name.setText("");
                kc_score.setText("");
            }
            getEmployeeByID_KC(id);  
    }//GEN-LAST:event_kc_idKeyReleased

    private void quality_scoreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quality_scoreActionPerformed
          
    }//GEN-LAST:event_quality_scoreActionPerformed
         private void handleIDKeyReleased(String id) {
    if (!id.isEmpty()) {
        try {
            int employeeID = Integer.parseInt(id); // Convert the ID to an integer

            int absences = getEmployeeAbsences(employeeID);
            
            if (absences >= 2) {
                attendanceScore = "20";
            } else if (absences == 1) {
                attendanceScore ="60";
            } else {
                attendanceScore = "100";
            }
            con.close();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid ID format.");
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error retrieving information: " + ex.getMessage());
        }
    }
}
    
     private void getEmployeeByID(String id){
    // Implement the logic to retrieve employee information based on the ID
    // You can perform database queries or other operations here
    // For example:
    try {
        con = ConnectionManager.getConnection();
            stmt = con.createStatement();

        // Execute a SELECT query to retrieve data from the "emp_info" table based on the employee ID
       String query = "SELECT * FROM emp_info WHERE EmployeeID = ?";
        PreparedStatement pstmt = con.prepareStatement(query);
        pstmt.setString(1, id);
        rs = pstmt.executeQuery();
        
        while(rs.next()){

                   qa_name.setText(rs.getString("emp_fname") + " " + rs.getString("emp_lname"));
        }
         
        
        // Process the ResultSet and display or handle the retrieved employee information
        // For example, you can display the information in JTextFields or other components

    } catch (SQLException ex) {
        ex.printStackTrace(); // Handle SQL exceptions
    }
     }
   private void getEmployeeByID_KC(String id){
    // Implement the logic to retrieve employee information based on the ID
    // You can perform database queries or other operations here
    // For example:
    try {
        con = ConnectionManager.getConnection();
            stmt = con.createStatement();

        // Execute a SELECT query to retrieve data from the "emp_info" table based on the employee ID
       String query = "SELECT * FROM emp_info WHERE EmployeeID = ?";
        PreparedStatement pstmt = con.prepareStatement(query);
        pstmt.setString(1, id);
        rs = pstmt.executeQuery();
        
        while(rs.next()){
            kc_name.setText(rs.getString("emp_fname") + " " + rs.getString("emp_lname"));
        }
         
        
        // Process the ResultSet and display or handle the retrieved employee information
        // For example, you can display the information in JTextFields or other components

    } catch (SQLException ex) {
        ex.printStackTrace(); // Handle SQL exceptions
    }
     }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable jTable10;
    private com.toedter.calendar.JDateChooser kc_date;
    private javax.swing.JTextField kc_id;
    private javax.swing.JTextField kc_name;
    private javax.swing.JTextField kc_score;
    private com.toedter.calendar.JDateChooser qa_date;
    private javax.swing.JTextField qa_id;
    private javax.swing.JTextField qa_name;
    private javax.swing.JTextField quality_score;
    private jdev.swing.RoundPanel roundPanel1;
    private jdev.swing.RoundPanel roundPanel2;
    private jdev.swing.RoundPanel roundPanel3;
    // End of variables declaration//GEN-END:variables
}
